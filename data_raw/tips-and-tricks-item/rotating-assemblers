{
  category = "game-interaction",
  dependencies = {
    "introduction"
  },
  name = "rotating-assemblers",
  order = "k",
  simulation = {
    init = "\n    player = game.create_test_player{name = \"big k\"}\n    player.teleport({0, 2.5})\n    game.camera_player = player\n    game.camera_player_cursor_position = player.position\n    game.camera_alt_info = true\n\n    local surface = game.surfaces[1]\n\n    surface.create_entity{name = \"substation\", position = {0, -10}}\n    surface.create_entity{name = \"electric-energy-interface\", position = {0, -10}}\n\n    local assembler_1 = surface.create_entity{name = \"assembling-machine-2\", position = {-3.5, -0.5}, force = \"player\"}\n    local assembler_2 = surface.create_entity{name = \"assembling-machine-2\", position = {3.5, -0.5}, force = \"player\"}\n\n    assembler_1.set_recipe(\"electric-engine-unit\")\n    assembler_2.set_recipe(\"electric-engine-unit\")\n\n    step_1 = function()\n      script.on_nth_tick(1, function()\n        if game.move_cursor({position = assembler_2.position}) then\n          step_2()\n        end\n      end)\n    end\n\n    global_rotate_count = 1\n    step_2 = function()\n      local count = 30\n      local rotate_count = global_rotate_count\n      script.on_nth_tick(1, function()\n        if count > 0 then count = count - 1 return end\n        assembler_2.rotate({by_player = player})\n        rotate_count = rotate_count - 1\n        if rotate_count > 0 then\n          count = 15\n          return\n        end\n        global_rotate_count = (global_rotate_count % 3) + 1\n        reset()\n      end)\n    end\n\n    reset = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        if count > 0 then count = count - 1 return end\n        if game.move_cursor({position = player.position}) then\n          start()\n        end\n      end)\n    end\n\n    start = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        if count > 0 then count = count - 1 return end\n        step_1()\n      end)\n    end\n\n    start()\n\n  "
  },
  tag = "[entity=assembling-machine-2]",
  trigger = {
    triggers = {
      {
        machine = "assembling-machine-2",
        type = "set-recipe",
        uses_fluid = true
      },
      {
        machine = "assembling-machine-3",
        type = "set-recipe",
        uses_fluid = true
      }
    },
    type = "or"
  },
  type = "tips-and-tricks-item"
}