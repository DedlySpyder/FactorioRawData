{
  category = "game-interaction",
  dependencies = {
    "stack-transfers"
  },
  name = "entity-transfers",
  order = "g",
  simulation = {
    init = "\n    player = game.create_test_player{name = \"big k\"}\n    player.teleport({0, 2.5})\n    game.camera_player = player\n    game.camera_player_cursor_position = player.position\n    game.camera_alt_info = true\n\n    game.surfaces[1].create_entity{name = \"coal\", position = {-5.5, -1.5}, amount = 123456}\n    game.surfaces[1].create_entity{name = \"coal\", position = {-4.5, -1.5}, amount = 654321}\n    game.surfaces[1].create_entity{name = \"iron-ore\", position = {-5.5, 1.5}, amount = 314159}\n    local chest_name = \"wooden-chest\"\n\n    local entities = game.entity_prototypes\n    if not (entities[chest_name]) then\n      for name, entity in pairs (entities) do\n        if entity.type == \"container\" and entity.get_inventory_size(defines.inventory.chest) > 0 then\n          chest_name = name\n          break\n        end\n      end\n    end\n\n    game.surfaces[1].create_entities_from_blueprint_string\n    {\n      string = \"0eNqV0ttuwyAMANB/8TOpFHJh5VemacrF6ywlJgKyLYr495GiTdWWtesTMsgHG7xCO8w4WWIPegXqDDvQjys4OnEzbHt+mRA0kMcRBHAzblE7W0abjcTEp6y3NAwQBBD3+AE6D+Km4LxhzF6i03R4kSvDkwBkT54wlXIOlmeexxZtxK8WIWAyLuYa3m6OXlYLWOISa4KeLHbpTG4l/pDlnXK5K9c7cvFH27/M4ovcQcr/ItUVpLqzx2TJ249Xf8PvxvTIWfeKzu+IxSGZ+aEK21+fx0JfzKGAN7QuXfSQl+ooVV4rdVRFCJ9StORn\",\n      position = {-1,0},\n    }\n\n    local chest = game.surfaces[1].find_entity(chest_name, {-3.5, 1.5}) or game.surfaces[1].create_entity{name = chest_name, position = {-3.5, 1.5}, force = \"player\"}\n\n    reset_items = function()\n      for k, burnieboy in pairs (game.surfaces[1].find_entities_filtered{type = \"mining-drill\"}) do\n        burnieboy.clear_items_inside()\n        burnieboy.insert({name = \"coal\", count = 41})\n      end\n\n      chest.clear_items_inside()\n      chest.insert({name = \"iron-ore\", count = 80})\n\n      for k, furnaceboy in pairs (game.surfaces[1].find_entities_filtered{type = \"furnace\"}) do\n        furnaceboy.crafting_progress = 0\n        furnaceboy.clear_items_inside()\n        furnaceboy.get_output_inventory().insert({name = \"iron-plate\", count = 40})\n      end\n\n      player.clear_items_inside()\n\n    end\n\n    fake_transfer_to = function(entity)\n      local stack = player.cursor_stack\n      if not (stack.valid and stack.valid_for_read) then return end\n      local name, count = stack.name, stack.count\n      local inserted = entity.insert{name = name, count = count}\n      if inserted == 0 then return end\n\n      player.remove_item{name = name, count = inserted}\n      player.surface.create_entity\n      {\n        name = \"flying-text\",\n        position = {entity.position.x, entity.position.y - 0.5},\n        text =\n        {\n          \"\",\n          \"-\",\n          inserted,\n          \" \",\n          game.item_prototypes[name].localised_name,\n          \" (\",\n          player.get_item_count(name),\n          \")\"\n        }\n      }\n      player.play_sound{path = \"utility/inventory_move\"}\n    end\n\n\n    fake_transfer_from = function(entity)\n      local contents = entity.get_output_inventory().get_contents()\n      local transferred = {}\n      for name, count in pairs (contents) do\n        local inserted = player.insert{name = name, count = count}\n        if inserted > 0 then\n          entity.remove_item{name = name, count = inserted}\n          transferred[name] = inserted\n        end\n      end\n\n      if not next(transferred) then return end\n\n      local caption = {\"\"}\n      for name, count in pairs (transferred) do\n        table.insert(caption, \"+\")\n        table.insert(caption, count)\n        table.insert(caption, \" \")\n        table.insert(caption, game.item_prototypes[name].localised_name)\n        table.insert(caption, \" (\")\n        table.insert(caption, player.get_item_count(name))\n        table.insert(caption, \")\\n\")\n      end\n\n      player.surface.create_entity\n      {\n        name = \"flying-text\",\n        position = {entity.position.x, entity.position.y - 0.5},\n        text = caption\n      }\n      player.play_sound{path = \"utility/inventory_move\"}\n    end\n\n    step_1 = function()\n      script.on_nth_tick(1, function()\n        local finished = game.move_cursor({position = {-6, -1}})\n        if finished then\n          step_2()\n        end\n      end)\n    end\n\n    step_2 = function()\n      local count = 30\n      local selected = nil\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = {-4, -1.5}})\n        if player.selected and player.selected ~= selected then\n          selected = player.selected\n          fake_transfer_from(player.selected)\n        end\n        if finished then\n          step_3()\n        end\n      end)\n    end\n\n    step_3 = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n\n        local finished = game.move_cursor({position = {0, -1.5}})\n\n        if finished then\n          step_4()\n        end\n      end)\n    end\n\n    step_4 = function()\n      local stack = player.get_main_inventory().find_item_stack(\"coal\")\n      stack.swap_stack(player.cursor_stack)\n      local count = 30\n      local selected = nil\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = {5, -1}})\n        if player.selected and player.selected ~= selected then\n          selected = player.selected\n          fake_transfer_to(player.selected)\n        end\n        if finished then\n          step_5()\n        end\n      end)\n    end\n\n    step_5 = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = chest.position})\n        if finished then\n          step_6()\n        end\n      end)\n    end\n\n    step_6 = function()\n      local count = 30\n      player.clear_cursor()\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        fake_transfer_from(player.selected)\n        step_7()\n      end)\n    end\n\n    step_7 = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n\n        local finished = game.move_cursor({position = {0, -1}})\n\n        if finished then\n          step_8()\n        end\n\n      end)\n    end\n\n    step_8 = function()\n      local stack = player.get_main_inventory().find_item_stack(\"iron-ore\")\n      stack.swap_stack(player.cursor_stack)\n      local count = 30\n      local selected = nil\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = {5, -1}})\n        if player.selected and player.selected ~= selected then\n          selected = player.selected\n          fake_transfer_to(player.selected)\n        end\n        if finished then\n          step_9()\n        end\n      end)\n    end\n\n    step_9 = function()\n      player.clear_cursor()\n      local count = 30\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = {0, -1}})\n\n        if finished then\n          step_10()\n        end\n      end)\n\n    end\n\n    step_10 = function()\n      local count = 30\n      local selected = nil\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = {5, -1}})\n        if player.selected and player.selected ~= selected then\n          selected = player.selected\n          fake_transfer_from(player.selected)\n        end\n        if finished then\n          reset()\n        end\n      end)\n    end\n\n    reset = function()\n      local count = 30\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        local finished = game.move_cursor({position = player.position})\n        if finished then\n          start()\n        end\n      end)\n    end\n\n    start = function()\n      local count = 60\n      script.on_nth_tick(1, function()\n        count = count - 1\n        if count > 0 then return end\n        reset_items()\n        step_1()\n      end)\n\n    end\n\n    reset_items()\n    start()\n\n  "
  },
  skip_trigger = {
    triggers = {
      {
        transfer = "in",
        type = "entity-transfer"
      },
      {
        transfer = "out",
        type = "entity-transfer"
      }
    },
    type = "and"
  },
  tag = "[item=burner-mining-drill][item=stone-furnace]",
  trigger = {
    triggers = {
      {
        type = "dependencies-met"
      },
      {
        ticks = 108000,
        type = "time-elapsed"
      }
    },
    type = "sequence"
  },
  tutorial = "entity-transfers",
  type = "tips-and-tricks-item"
}